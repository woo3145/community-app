// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  posts         Post[]
  comments      Comment[]
}

model Profile {
  id           Int     @id @default(autoincrement())
  name         String?
  nickname     String?
  avatar       String?
  annual       Int     @default(0) // 경력
  interestTags Tag[] // 관심있는 주제
  jobs         Job[] // 직군,직무
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @unique
}

model Job {
  id Int @id @default(autoincrement())

  user     Profile[]
  parentId Int?
  parent   Job?      @relation("JobSubJobs", fields: [parentId], references: [id]) // 직군
  subJobs  Job[]     @relation("JobSubJobs") // 직무
}

model Tag {
  id       Int       @id @default(autoincrement())
  title    String
  posts    Post[]
  user     Profile[]
  parentId Int?
  parent   Tag?      @relation("TagSubTags", fields: [parentId], references: [id])
  subTags  Tag[]     @relation("TagSubTags")
}

model Post {
  id        Int       @id @default(autoincrement())
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  title     String    @db.VarChar(255) // bite가 아니라 문자길이를 뜻함
  content   String
  published Boolean   @default(false)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  userId    String?
  tags      Tag[]
  comments  Comment[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  content  String
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  userId   String?
  post     Post?    @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  postId   Int?
}

// onUpdate: Cascade   -> 참조중인 레코드의 식별자가 변경되면 해당 레코드도 변경 (ex. 참조중인 user레코드의 id필드가 변경되면 post의 userId도 변경)
// onDelete: Cascade   -> 참조중인 레코드가 삭제되면 자신도 종속되어 삭제됨 (ex. user 삭제시 해당 유저를 참조하는 모든 post 삭제)

// onUpdate: Restrict   -> 참조중인 레코드의 식별자 변경을 막음(ex. post가 있다면 참조중인 user레코드의 id필드 변경 불가)
// onDelete: Restrict   -> 해당 레코드가 참조되어있다면 삭제를 막음(ex. 어떤 user를 참조하는 post가 있다면 해당 user레코드 삭제 불가)

// onUpdate: SetNull   -> 참조중인 레코드의 식별자가 변경되면 null로 변경
// onDelete: SetNull   -> 참조중인 레코드가 삭제되면 null로 변경
